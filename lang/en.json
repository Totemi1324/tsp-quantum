{
    "tab-0": "Lessons",
    "tab-1": "Demo",
    "tab-2": "Downloads",
    "lesson_page": {
        "p-0": "When we have to travel long distances, we want to get from one place to another as quickly as possible. This challenge of precise route planning was and is faced by people long ago as well as today. But can quantum physics take this work off our hands?",
        "p-1": "This course is a comprehensive guide to the quantum mechanical approach to this age-old optimization problem. You will learn:",
        "p-2": "If you're looking for further information, check out",
        "li-0": "What graphs are and how to perform calculations on them",
        "li-1": "How QUBO problems are constructed",
        "li-2": "How the Traveling Salesman Problem can be represented as a Hamiltonian for quantum annealers",
        "li-3": "What the advantages and drawbacks of this method are",
        "li-4": "How to perform pathfinding on your own graphs",
        "Link": "the project's GitHub repo",
        "strong": "Have fun learning!",
        "h2-0": "Chapter 1",
        "h2-1": "Chapter 2",
        "h2-2": "Chapter 3",
        "h2-3": "Chapter 4",
        "h2-4": "Chapter 5"
    },
    "demo_page": {
        "p-0": "This part of the site is currently under construction. Stay tuned!"
    },
    "download_page": {
        "p-0-1": "Here, you can find all files related to this course and the TSPquantum project for free download. If you can't find what you're searching for and are interested in additional data, please send your request to ",
        "p-0-2": ". All the following files are for research-related and non-commercial use only and an unauthorised publication and/or reproduction on platforms other than this is prohibited, unless disclosed otherwise.",
        "h2-0": "Download area",
        "h3-0": "Applications",
        "h3-1": "Others"
    },
    "lesson-BxESn": {
        "h2-0": "An introduction to the Traveling Salesman Problem",
        "p-0": "You are the representative of a big company that sends you on a business trip through its main sites. Coincidentally, they are located in the eight largest cities in Germany<sup>1</sup>. You want to save as much time and money as possible, of course. If you start from Berlin, visit each city exactly once, and then return to Berlin, in what order should you visit the cities to keep the trip as short as possible?",
        "p-1": "That is the question addressed by the Traveling Salesman Problem. Or, put more generally:",
        "p-2": "In the case of such small tasks, a solution by eye is of course possible: If beelines are taken as the measure of distance, the shortest path would be the one as shown, around the outside. But if you have to visit 20, 50, or even 100 cities, the matter is no longer so simple.",
        "p-3-0": "The <i>Traveling Salesman Problem</i> (or <i>TSP</i> for short) can be found in numerous real-world applications, such as supply chain design, pipeline renovation, and crystal structure analysis. Accordingly, a fast and reliable solution method is important. The catch: The number of possible paths, calculated with the formula",
        "p-3-1": "is immense and growing at a huge pace with each added city. In our 8 cities example, we have <span class=\"emphasis\">2520</span> possibilities to choose from, but with 12 cities, there are already <span class=\"emphasis\">19.958.400</span> different paths. Hence, the problem is NP-hard, basically meaning that an algorithm that finds the exact solution for large inputs in a finite time is likely to be impossible.",
        "p-4": "The TSP is a good example of an \"optimization problem\". Since we can't try all solutions without waiting for decades and can't calculate the best one definitively, we try to approximate it as best as we can. It is possible to find the <i>\"global\" optimum</i>, the shortest path of all, but we can just as well end up at a <i>\"local\" optimum</i>, one of the many shorter paths. Quantum annealers, a subset of quantum computers, are made for this task because of the physical properties of qubits. Additionally, traditional optimization algorithms are slow, whereas a quantum annealer finds its solution in mere microseconds. In this course, we will explore how the quantum annealers of D-Wave can handle the TSP and whether we can find better solutions than with traditional methods.",
        "strong-0": "\"Given a list of cities and the distances between each pair of cities, what is the shortest possible route that visits each city exactly once and returns to the origin city?\"",
        "h3-0": "Why a quantum approach?",
        "i-0": "How can we find the deepest valley when seeing just one point at a time? An example for optimization problems"
    },
    "lesson-Z30Ce": {
        "h2-0": "Graph theory",
        "p-0": "Computers only take numbers, so we need to use them as well. We already subconsciously drew a key concept of the solving method with the cities interconnected with lines: <i>Graphs</i> are a fundamental part of mathematics, so much so that they have their own field of study called <i>graph theory</i>. In general, a graph describes a set of cities, called <i>\"vertices\"</i>, and how they are connected mathematically.",
        "p-1": "Let's simplify our example from the lecture before to just 4 cities and name them A, B, C, and D.",
        "p-2": "Every node is represented as a blue circle connected to the other nodes through <i>\"edges\"</i>, the distances between the nodes drawn in gray. In our example, every possible pair of vertices is connected, each edge can be traversed in both directions and each edge has a unique distance value assigned to it. This is called a <strong>complete undirected weighted graph</strong>. Graphs can have various shapes and types, but in this tutorial, we only focus on this one since it corresponds to the standard definition of the TSP.",
        "p-3": "In mathematical terms, a graph like this can be characterized as follows:",
        "p-4": "where",
        "p-5": "That was quite a lot at once. Let's go through it step-by-step:",
        "p-6": "So, the graph above can be described like this:",
        "p-7": "The job of every TSP algorithm is to find a path that visits each vertex exactly once and returns to the starting vertex (also called a <i>closed Hamiltonian cycle</i>) where the sum of the distances from the distance function is as low as possible. Since the goal is to traverse the graph, the TSP is a \"graph traversal\" problem.",
        "i-0": "Fully connected graph with 4 vertices",
        "li-0": "A graph <span class=\"emphasis\">G</span> is a combination of three components: <span class=\"emphasis\">V</span>, the vertices, <span class=\"emphasis\">E</span>, the edges, and <span class=\"emphasis\">d</span>, a distance function. The notation in <span class=\"emphasis\">()</span> as a triplet shows that they belong together.",
        "li-1": "<span class=\"emphasis\">V</span> denotes a set of vertices that are part of the graph. Sets are marked by curly braces <span class=\"emphasis\">&#123;&#125;</span>.",
        "li-2": "span class=\"emphasis\">E</span> is a set of edges, which are unordered pairs of vertices &#123;v<sub>i</sub>, v<sub>j</sub>&#125;. The pipe symbol <span class=\"emphasis\">|</span> defines what conditions these pairs must fulfill: Both v<sub>i</sub> and v<sub>j</sub> must be part of V<sup>2</sup> (\"squared\" for sets means the cartesian product, i.e. the set of all possible combinations of a set's elements) <strong>and</strong> v<sub>i</sub> must not be equal to v<sub>j</sub> to prevent loops.",
        "li-3": "<span class=\"emphasis\">d</span> is a function that maps every edge (i.e. unordered pair of vertices) to a real number, in this case, the distance."
    },
    "lesson-m2MJl": {
        "h2-0": "QUBO problems",
        "p-0": "Before we can explore how quantum annealers work, there is an essential basic to be covered. For a quantum annealer to solve a task, it must be defined as a <strong>quadratic unconstrained binary optimization problem</strong> or <strong>QUBO problem</strong> for short. This isn't particularly helpful, so let's break it down:",
        "p-1": "The QUBO form is another mathematical construct that aids the quantum annealer in utilizing the physical properties of its qubits. Let's look at an example to illustrate the concept.",
        "p-2": "This 2x2 checkers board has the four fields <span class=\"emphasis\">a</span>, <span class=\"emphasis\">b</span>, <span class=\"emphasis\">c</span>, and <span class=\"emphasis\">d</span>. Additionally, there are four pieces, each of which can, but doesn't have to be placed on any field (but not multiple on the same field). When a field is occupied, it is represented as <strong>1</strong>, otherwise as a <strong>0</strong>. The quantum computer should place the pieces so that as many fields as possible are occupied.",
        "p-3-0": "Again: A computer needs numbers. Is there a way to tell how good a particular solution is? All optimization problems require a <strong>cost function</strong>, which rates a solution's correctness: The lower the cost, the better. Now, our goal shifted from finding the best solution to minimizing the cost function. If we have a QUBO problem that takes four variables <span class=\"emphasis\">a</span>, <span class=\"emphasis\">b</span>, <span class=\"emphasis\">c</span>, and <span class=\"emphasis\">d</span> (which are either 0 or 1) as an input, the cost function is defined as follows:",
        "p-3-1": "First, we sum up the values of all fields, then we add the product of each possible <i>pair</i> of the field values. The <span class=\"emphasis\">h</span> with which the field values are multiplied are simple coefficients, i.e. real numbers, that control how much we want to reward (or punish) the individual occupancies. This is quite a clever system: If a field is unoccupied, meaning 0, it eliminates the corresponding coefficient from the equation. Similarly, in the pairs of fields, a reward only stays in the equation if both fields are 1. Since we are searching for the lowest cost, <span class=\"emphasis\">h &#60; 0</span> means \"reward\", <span class=\"emphasis\">h &#62; 0</span> \"punishment\" and <span class=\"emphasis\">h = 0</span> \"irrelevant\". For example: If we really want <span class=\"emphasis\">a</span> to be occupied, we can give it an <span class=\"emphasis\">h</span> of -10, or if we want to prevent that <span class=\"emphasis\">b</span> and <span class=\"emphasis\">c</span> are occupied simultaneously, <span class=\"emphasis\">h</span> should be a high positive number like 25.",
        "p-4-0": "Now we can define a QUBO problem for our original task: As many fields as possible should be occupied.",
        "p-4-1": "We can omit to calculate the pairs of field values since the relations between fields are irrelevant for this problem. This is a valid cost function because the lowest cost, -4, is only reached if all fields are 1. Let's add the following condition to our task: Fields <span class=\"emphasis\">a</span> and <span class=\"emphasis\">b</span> can <strong>not</strong> be occupied at the same time.",
        "p-4-2": "If <span class=\"emphasis\">a</span> and <span class=\"emphasis\">b</span> are both 1, even if all fields are occupied for maximum reward, the cost is 0, meaning it's worse than all the other possible solutions. Hence, the best cost achievable here is -3, displaying the correct solution. Another practical strategy in QUBO problems is <i>squaring</i>, for instance for the task \"Exactly <ins>two out of four</ins> fields should be occupied\":",
        "p-4-3": "This works because when summing up all fields and subtracting 2, the result is only 0 if exactly two fields are 1. But: If no field or one field is occupied, the result would be negative, giving an even better result. This can be fixed by squaring the equation because squaring a negative number will result in a positive value. The squared field values like <span class=\"emphasis\">a<sup>2</sup></span>, <span class=\"emphasis\">b<sup>2</sup></span>, etc. that result from multiplying the equation out would be illegal (i.e. against the rules of QUBO), but since in the case of binary numbers <span class=\"emphasis\">x<sup>2</sup>=x</span>, they can be replaced with <span class=\"emphasis\">a</span>, <span class=\"emphasis\">b</span>, etc. Also, constants like +4 can be omitted as well, because they just shift all results up or down by the same amount. We can check if our cost function works by testing it with different inputs:",
        "p-5": "Here are some other examples of QUBO equations:",
        "li-0": "<i>Quadratic</i> means a maximum of two variables can be multiplied.",
        "li-1": "<i>Unconstrained</i> means the correct answer is not constrained by other conditions.",
        "li-2": "<i>Binary</i> means we can insert 0 or 1 only.",
        "li-3": "<i>Optimization</i> is – if you remember from the previous lessons – the process of finding the optimal solution to a complex problem with approximation.",
        "li-4": "As many fields as possible should be empty.",
        "li-5": "There should be <ins>no more than one</ins> field occupied. (i.e.: Exactly zero fields or one field should be occupied.)",
        "li-6": "In every row and every column, <ins>exactly one</ins> field should be occupied.",
        "i-0": "Sidenote: The following is only one possible type of QUBO problem, but since it is closest to the TSP, it is the only one covered in this course. Also, there are other ways of programming a quantum annealer, like Ising problems, which we will omit for the sake of conciseness."
    },
    "lesson-xR66u": {
        "h2-0": "How do quantum annealers work?",
        "p-0": "Equipped with the basic mathematics, we can now face the question: How do we get from an input to a result? The process of programming a quantum annealer differs greatly from that of a traditional computer since it takes numbers rather than instructions or lines of code. Here is a depiction of this procedure:",
        "p-1": "This may look a bit confusing, so let's tackle it step-by-step.",
        "p-2-0": "To represent our data, we need yet another mathematical construct. In its traditional form, a vector is a quantity in space with a direction and length (often represented as an arrow or ray)<sup>1</sup> and consists of two or more coordinates written in a vertical column. For example, a vector in 3-dimensional space would contain three coordinates:",
        "p-2-1": "As a vector holds an array of numbers, we can utilize vectors to retrieve our results from the quantum annealer. If we had a 4x4 board with 4<sup>2</sup>=16 fields, the entries would denote whether our fields <span class=\"emphasis\">a</span>, <span class=\"emphasis\">b</span>, etc. through <span class=\"emphasis\">n</span> should be occupied (1) or not (0). This is defined as the <strong>answer vector q<sub>A</sub></strong>.",
        "p-2-2": "Similarly, think of a <i>matrix</i> as a series of vectors glued together. It is a rectangular field of numbers where each element is indexed in the format <span class=\"emphasis\">a<sub>ij</sub></span> (<span class=\"emphasis\">i</span> and <span class=\"emphasis\">j</span> denote the row and column index of a given element).",
        "p-3": "For example, the element a<sub>31</sub> of the matrix above is 5.",
        "p-4-0": "Don't worry if it is not fully clear yet, we will use matrices only as a simple means to an end. Remember the QUBO equations from the previous lesson? In fact, matrices are the only way to pass those as an input to the quantum annealer. Since the form of QUBO equations is always the same, we can concatenate the coefficients (the only values that change) in a matrix of the following format to create a representation of our problem's definition:",
        "p-4-1": "This is the definition of the <strong>Hamilton matrix H</strong>, or just <strong>Hamiltonian</strong>. In its main diagonal (the fields where <span class=\"emphasis\">i</span> and <span class=\"emphasis\">j</span> are equal) are the coefficients of the individual fields and next to them those of the connections to other fields. Because the lower half remains empty and is filled with zeros, the Hamiltonian belongs to the type of <i>upper triangular matrices</i>. If we take our \"boardgame\" example from the previous lesson with the QUBO problem \"Exactly two out of four fields should be occupied\", this is the resulting Hamiltonian:",
        "p-5-0": "Now, we said that a quantum annealer tries to find the answer vector whose coordinates give the lowest cost. Since we compressed the cost function, which was our QUBO problem, into a matrix, the operation can be reformulated as follows<sup>2</sup>:",
        "p-5-1": "This looks more complicated than it is and just tells us that we want to minimize the cost <span class=\"emphasis\">C</span> which consists of two sums, namely the products of each coefficient <span class=\"emphasis\">a<sub>i</sub></span> with its respective field <span class=\"emphasis\">q<sub>i</sub></span> and the other coefficients <span class=\"emphasis\">b<sub>ij</sub></span> with any pair of two fields <span class=\"emphasis\">q<sub>i</sub></span> and <span class=\"emphasis\">q<sub>j</sub></span>. Alternatively, we can consider the operation as a matrix multiplication, where the Hamiltonian is multiplied from the right with the answer vector and from the left with the transformed (i.e. horizontal) answer vector.",
        "p-6": "But how does a quantum annealer work on the inside? This is a more complicated subject, which we can only treat superficially here without having advanced knowledge of quantum physics.",
        "p-7": "The heart of a quantum annealer is the <i>QPU</i> (Quantum Processing Unit<sup>3</sup>), a few square centimeters large chip, which is equipped with the quantum mechanical counterparts of the bits, <i>qubits</i>. In contrast to classical computers, these are not realized with transistors but with artificial atoms of a certain spin, which allows them to assume two states simultaneously (<i>spin up</i> and <i>spin down</i>) according to the rules of quantum physics until they are measured. The quantum annealer derives its potentially enormous computing power from this state called <i>superposition</i>.",
        "p-8": "The current model <i>D-Wave Advantage</i> has exactly 5627 qubits. These are interconnected with so-called <i>couplers</i>, which allow the qubits to interact with each other. The number of couplers per qubit ultimately determines the computing power of the annealer.",
        "p-9": "These couplers consist of magnetic fields that can be tweaked individually, so that after a measurement, a qubit is more likely to become <span class=\"emphasis\">1</span> or <span class=\"emphasis\">0</span>, respectively, and pairs of qubits are more likely to assume equal or unequal values. When the quantum annealer receives a Hamiltonian, it sets the coefficients <span class=\"emphasis\">a<sub>i</sub></span> and <span class=\"emphasis\">b<sub>ij</sub></span> as the strength of these magnetic fields also called <i>bias</i>. For the annealer to work, the QPU must be cooled to a temperature near absolute zero (16mK, approx. -273.1°C). Through an effect known as <i>quantum tunneling</i>, the qubits in this system try to anneal the state of the lowest energy, which, through the programming of the couplers, is the best solution for the original optimization problem. That is the reason why a cost function is needed: It determines the state of \"lowest cost\" (or \"lowest energy\").",
        "h3-0": "Vectors and matrices",
        "h3-1": "The inner workings",
        "strong-0": "Congratulations! You now understand how a quantum annealer solves problems.",
        "i-0": "The graphs of the (a) Chimera architecture of the D-Wave 2000Q and the newer (b) Pegasus architecture show the differences between the QPU's structures. (a) has 6 couplers/qubit, (b) 15 couplers/qubit"
    },
    "lesson-yV8O6": {
        "h2-0": "Transforming the Traveling Salesman Problem for quantum annealers",
        "p-0": "Now, we have arrived at the main part of the course. Creating a quantum solution for the TSP is an exciting example of the versatility of quantum computing as well as a demonstration of how it can help improve everyday tasks. The first step towards such a method is the question of how to transform the core component of the TSP, the graph, into a QUBO problem.",
        "p-1": "As shown in the previous sections, the easiest way of creating QUBO problems is through a square field with numbered cells. Let's consider the simplest instance of the TSP, a graph of four cities (since this is the minimum number of vertices that allows different solutions than the optimum):",
        "p-2": "If we consider <span class=\"emphasis\">A</span> as a starting point, here our tour is <strong>A ➞ B ➞ D ➞ C ➞ A</strong> (of course, the inverse A ➞ C ➞ D ➞ B ➞ A is valid, too). How can we transform this data structure to a number field?",
        "p-3": "A possible tour is characterized by two parts of information:",
        "p-4": "By using a matrix, the mathematical concept previously discussed, it is possible to address the first point. Applied to the graph above, the result is this:",
        "p-5": "The rows represent the individual cities, while the columns mark the \"points in time\", i.e. each step made. An entry of <span class=\"emphasis\">1</span> in the field <span class=\"emphasis\">a<sub>ij</sub></span> means that the <span class=\"emphasis\">i</span>-th city is visited in the <span class=\"emphasis\">j</span>-th time step. The fifth time step would mark the return to the starting city, but since it would always be an exact copy of the first column, it can be omitted to minimize the data. Now, we have created an abstraction that can be applied to tours in graphs of any size. Let's name this new structure <i>tour matrix</i>.",
        "p-6": "Perhaps, you can already see where this is going: Indeed, this looks very similar to the \"checkers\" example from Chapter 2. You can think of the <span class=\"emphasis\">1</span>s as the pieces that can be placed on a board to mark which city belongs to which time step. So next, we're going to explore how to extract the QUBO equation.",
        "h3-0": "The Tour Matrix",
        "li-0": "The chronological order of the visited cities",
        "li-1": "The total cost of the route, i.e. the sum of the length of the edges taken"
    },
    "lesson-0nRrT": {
        "h2-0": "Formulating the QUBO equation",
        "p-0": "From the example tour matrix in the previous lesson, the following rules for occupancy can be derived:",
        "p-1": "In this 4x4 grid, the cells are named in alphabetical order. For four cities, the QUBO equation is formulated as follows:",
        "p-2": "This is a massive and unhandy equation, but a valid cost function since only the correct occupations yield the lowest cost. Since it depends on the number of cities <i>n</i>, the QUBO equation takes <i>n<sup>2</sup></i> variables as its input (meaning it grows at a quadratic rate) and must be reformulated for every individual TSP instance. But this is only half of the story. In order to quantify the second key information of the tours, the route cost must also be considered in the QUBO equation. Luckily, since it is a cost function as well, the values can be adopted and added to the total cost as is. But how to determine which ones to add and when? Consider the following example:",
        "p-3-0": "A given edge is taken if its initial vertex is marked in one column and its destination vertex in the following column. Here, the arrows denote all edges that go from <span class=\"emphasis\">B</span> to the other vertices. Since we initially don't know when we're going to visit <span class=\"emphasis\">B</span>, this has to be repeated for all time steps. For example, the edge <span style=\"text-decoration: overline\">BA</span> with the cost of 6.6 is corresponding with <span class=\"emphasis\">(e, b)</span>, <span class=\"emphasis\">(f, c)</span>, <span class=\"emphasis\">(g, d)</span>, and <span class=\"emphasis\">(h, a)</span>. If we multiply this cost with those pairs of variables (this is compliant with the rules of QUBO problems), it is only added if both fields are visited, i.e. equal to <span class=\"emphasis\">1</span>. Additionally, there is no danger of adding the cost of a specific edge more than once because, since it is forbidden to visit a city more than once, only one of these four cases will ever occur, if any. So this is what the second half of the QUBO equation looks like:",
        "p-3-1": "This part just gets added to the rest of the equation and must also be re-generated for every TSP instance. Now, this cost function will yield the best (lowest) energy if the formal rules of occupancy, i.e. 1/row and 1/column are satisfied <i>and</i> the quantum annealer chooses those connections whose sum is minimal, according to the TSP requirements (keep this statement in mind; we will discuss in the next lesson why this isn't that simple).",
        "li-0": "Exactly one occupation per row is allowed (since it is not possible to visit a city more than once)",
        "li-1": "Exactly one occupation per column is allowed (since it is not possible to visit multiple cities at the same time)",
        "strong-0": "We've successfully turned the Traveling Salesman problem into an annealer-compatible QUBO problem!"
    },
    "lesson-EFTOp": {
        "h2-0": "From coefficients to the Hamiltonian",
        "p-0-0": "It's time to assemble: As discussed in Chapter 2, the coefficients from the QUBO equation need to be transferred to the Hamiltonian in order to be a valid input for the quantum annealer. The result of our calculations is a pretty massive matrix of the size 16x16 from which an excerpt is shown below:",
        "p-0-1": "So the problem is solved, right? Unfortunately, not quite. There is one issue left we have to talk about: the scaling. If we try to send this Hamiltonian to the quantum annealer, the results are the following:",
        "p-1-0": "The table shows the top 5 from the results of the D-Wave annealer (which are sorted from best to worst). A good portion, if not all of them visit only three or even less cities. This is because the coefficients that enforce the annealer to follow the rule \"Exactly one occupation per row/column\" are -2 or 2 and therefore too small compared to the distances between the vertices that range from 3 to 7. If the annealer occupies less cells, the energy it saves by omitting edges far outweighs the punishment it receives for visiting less cities. To fix this problem, we have to scale our coefficients accordingly: If we multiply all coefficients by the same factor, the relations are preserved, which means that we can scale certain parts of the equation to emphasize them more. As a general rule of thumb, if <span class=\"emphasis\">s</span> = the length of the longest possible tour in the graph and <span class=\"emphasis\">n</span> = the number of cities, all coefficients that enforce the first rule should be calculated as follows:",
        "p-1-1": "Now, our Hamiltonian solves the TSP correctly for all sizes! Here is a visualization of the Hamilton matrix for a big TSP with <span class=\"emphasis\">n = 8</span>:",
        "p-2": "The updated Hamiltonian of the <span class=\"emphasis\">n = 4</span> example from Lesson 5 now yields the following solution:",
        "p-3": "Now we have to reverse-engineer the tour on the graph: The answer vector <span class=\"emphasis\"><i>q<sub>A</sub></i></span> (which contains the values of the variables <span class=\"emphasis\">a</span> through <span class=\"emphasis\">n</span>) first has to be translated to the tour matrix by transferring the values one-by-one to a 4x4 grid. By attaching the timestep and city labels of the tour matrix, the order of the visited cities becomes visible: <strong> D ➞ B ➞ C ➞ A (➞ D)</strong>. Let's look at the graph again: Indeed, it found the shortest path!",
        "h3-0": "How to evaluate the results"
    },
    "lesson-m9UPL": {
        "h2-0": "How to design your own graphs",
        "p-0": "Of course, small problem sizes like this are not really exciting; It's time to take on some major ones! Now that you successfully completed this course, you can have fun experimenting with bigger or even self-designed TSPs. The <strong style=\"color: #2eb6e8;\">Demo</strong> tab on the top of the page provides example code and instructions on how to interact with the D-Wave quantum annealers. Coding is not a requirement in these lessons, but even if you have little experience, just give it a try!",
        "p-1": "If you want to submit your own networks to the quantum annealer, you need to convert them to the Hamiltonian first. The tool <span class=\"emphasis\">Graph to Matrix</span>, which can be accessed in the <strong style=\"color: #2eb6e8;\">Downloads</strong> tab, generates a Hamiltonian from a graph input so you don't have to calculate it by hand.",
        "p-2": "If you want to visualize the results, download the tool <span class=\"emphasis\">Path Visualizer</span> that reads the results of the annealer and recreates the corresponding paths. You can browse between the solutions and compare their energy in the debug terminal.",
        "li-0": "Draw your vertices on a canvas and click <span class=\"emphasis\">Generate</span> to calculate the edges; the distance in pixels between each vertex represents the cost of the corresponding edge.",
        "li-1": "The Hamiltonian is created automatically with the correct scaling. Click <span class=\"emphasis\">Save Hamiltonian...</span> to save it on your computer in the NumPy matrix format.",
        "li-2": "Click <span class=\"emphasis\">Save Vertices...</span> to save the layout of your graph; this is needed later for evaluating the results."
    },
    "lesson-okhMZ": {
        "h2-0": "Experimental results",
        "p-0": "When it comes to evaluating the performance of quantum algorithms, this often poses a problem because of the inherent non-deterministic nature of this method. Due to the work with quantum states, there is always a portion of randomness involved. In the following sections, we therefore explore how efficient solving the Traveling Salesman Problem on quantum computers really is and how we can improve on this performance.",
        "p-1": "The first problem emerges when trying to quantify TSPs, the underlying mathematical problem. In order to be comparable, a uniform benchmark for graphs of arbitrary size is needed. One way to address this issue is to use graphs in the shape of regular polygons to test the quantum algorithm, starting with a triangle (since it is the simplest shape with a valid Hamiltonian cycle) up to an octagon:",
        "p-2": "Here, regular polygons with an edge length of 50 units each were used; the coordinates of the corner points can be calculated using e.g. a graphing calculator. These shapes are then converted to the respective Hamiltonian matrices, scaling the costs to 1% (0.5) and the coefficients to 8. For example, the triangle transforms into the following:",
        "p-3": "Using this structure, two problem sets were created: <i>Simple problems</i> where the costs are omitted (so the annealer's only task is to find a valid tour) and <i>complex problems</i> with the costs of the edges included. A major advantage of using polygons is that since the shortest path is always the perimeter, the optimal cost can be easily calculated beforehand using this formula, given that <span class=\"emphasis\">C<sub>n</sub></span> is the cost function for a polygon with <i>n</i> corners:",
        "p-4-0": "Now, the test cases are ready to be fed to the quantum annealer. But before performing the actual benchmark, we have to tune the hyperparameters, i.e. the static parameters that impact the algorithm performance and do not get changed during the calculations. The ones most important to our problem are <span class=\"emphasis\">chain_strength</span> and <span class=\"emphasis\">annealing_time</span>. According to the",
        "p-4-1": "<span class=\"emphasis\">chain_strength</span> represents the \"coupling strength between qubits that form a chain\" on the QPU, meaning the magnitude of the magnetic fields that function as couplers forcing qubits to assume identical values. Similarly, <span class=\"emphasis\">annealing_time</span> sets the time the qubits are allowed to anneal to their optimal energy state before reading them and causing the superposition to collapse. For each of these values, there exist prevailing rules of thumb, but they need not always yield the best results. The optimization process is lengthy and needs a lot of data; if you are interested in the detailed procedure and results, you can get them at the <strong style=\"color: #2eb6e8;\">Downloads</strong> tab of this site.",
        "p-5": "After the hyperparameters have been optimized, it's time to evaluate the overall effectiveness of the quantum solution method. To achieve this, every polygon size of both problem sets was evaluated by the state-of-the-art <i>D-Wave Advantage</i> (Pegasus architecture, 5640 qubits) and the older <i>D-Wave 2000Q</i> (Chimera architecture, 2048 qubits) systems with 10 random generated embeddings each. As a comparison to traditional computing, the problems were also submitted to a <i>Simulated Annealing</i> algorithm, which is a widely used heuristic approach to optimization problems that changes the parameters of a problem through random permutations and uses a cooling function to decide whether to keep or discard these<sup>1</sup>. A full explanation would go beyond the scopes of this course, but if you want to learn more about the procedure in detail, you can read about its applications in TSPs",
        "p-6": "Finally, the following graphs present the results of the different approaches in comparison. For each embedding, the results are read about 500 times from the annealer, but only the best measurement is kept. First, let's look at the energy deltas, that is, the amount of energy by which the quantum annealer missed the theoretical optimal solution (therefore, lower values are better). The bars indicate the arithmetic mean of 10 experimental results:",
        "p-7": "Next, the times needed for solving:",
        "p-8": "This experiments immediately show the downside of Simulated Annealing, similar to other traditional computing methods: Whereas it is able to find optimal solutions for large problem sizes, the time needed for computation is very lengthy, more than 10 minutes in most cases. The quantum annealers on the other hand are able to solve the same tasks in just fragments of a second. The newer D-Wave Advantage model is faster than the 2000Q across all problem sizes, but the computing time varies more greatly and is less consistent. In summary, our quantum algorithm can find at least one correct solution for every problem size and complexity except for the <span class=\"emphasis\">n = 8</span> complex problem.",
        "p-9-0": "All Python files used to perform the experiments as well as the raw measurement data can be accessed at",
        "p-9-1": "and at the <strong style=\"color: #2eb6e8;\">Downloads</strong> section.",
        "Link-0": "Reference Documentation",
        "Link-1": "here",
        "Link-2": "the project's GitHub repo"
    },
    "lesson-_Z9Gv": {
        "h2-0": "Where are the constraints?",
        "p-0": "Although the unbeatable speed of this quantum approach makes it very attractive, it also has some major limitations. Some of them are posed simply by the state of today's technology and are likely to be overcome by future advancements in the field of quantum computing. Since a graph of <i>n</i> nodes is first converted to a Tour Matrix of <i>n<sup>2</sup></i> elements and then to a Hamiltonian of <i>(n<sup>2</sup>)<sup>2</sup></i> elements, the number of qubits and connections needed rises quartically, i.e. by an exponent of four. Analogous to traditional computing, you could characterize the <i>complexity</i> of the quantum algorithm as:",
        "p-1": "As the number of interconnected qubits rises, the number of physical qubits that need to be combined to logical qubits increases, causing the probability of false results to grow exponentially. This is why <span class=\"emphasis\">n = 8</span> is approximately the limit of what the current D-Wave Advantage system can solve, as each qubit is connected to 15 others only. With each city added, the embedding also becomes larger, until eventually all the space on the QPU is used up. The figure on the right shows the space the embedding of the problem size <span class=\"emphasis\">n = 8</span> takes up on the QPU, working with chains that span 8-9 qubits in length. However, due to increasing computing capacity and more complex architectures, this limitation will likely become increasingly irrelevant in the future.",
        "p-2": "The <i>matrix density</i>, meaning the proportion of matrix elements that are not zeros, also plays a role in computing efficiency. The sparser the Hamiltonian, i.e. the fewer chains are needed relative to the problem size, the easier it is for the quantum computer to solve the QUBO problem. Since the matrices produced by this quantum TSP algorithm are relatively dense, the performance limit is reached with smaller problem sizes than usual. This constraint is far more relevant since it is not yet foreseeable whether the accuracy problems of quantum annealers will be solved by scaling alone.",
        "p-3": "When submitting problems to the QPU, the embedding is generated automatically by D-Wave Ocean to save time, especially in the case of larger problems. However, this is a complex optimization task as well which is why algorithms are likely to not find the best solution. If we wanted to maximize the efficiency, it therefore would be theoretically possible to manually embed the QUBO problem and to set each qubit and connection by hand. If you are interested in the technical side, you can read about it in detail in the",
        "p-4": "This task however requires not only a large amount of further mathematical calculations, but also an intricate and founded knowledge of the QPU topology. The process is time-consuming and has to be repeated for each individual problem size, making it only worthwhile for some small problems.",
        "h3-0": "A solution approach: Controlling the embedding",
        "Link-0": "official documentation"
    },
    "lesson-ufr4r": {
        "h2-0": "Possible improvements and optimizations",
        "p-0": "The presentation and evaluation of the method is completed; however, it should be considered more as a basis for further algorithmic approaches of this kind and can be further optimized and extended with a few adjustments.",
        "p-1": "Since TSP solutions are closed loops that visit every city, the starting point can be set arbitrarily. So in theory, if we take this decision away from the quantum annealer and set the starting point to, say, <span class=\"emphasis\">A</span>, the first row and column of the Tour matrix can be omitted, since this city is guaranteed not to be visited in the rest of the path:",
        "p-2": "In addition, the cost function needs to be adjusted so the path from <span class=\"emphasis\">A</span> to <span class=\"emphasis\">B</span>, <span class=\"emphasis\">A</span> to <span class=\"emphasis\">C</span> etc. is only dependent on the second node visited. This approach reduces the size of the Tour Matrix by 1, meaning the number of cities the annealer can find a solution for can be increased by 1 beyond its normal computing capability. However, these and other optimizations are only worthwhile in the long term if they can actually reduce the number of non-zero entries in the Hamiltonian.",
        "p-3": "To make the algorithm more applicable for real-life situations, it would also be possible to extend it beyond the scope of the traditional Traveling Salesman Problem for <i>incomplete graphs</i> (where not all nodes are interconnected) and <i>directed graphs</i> (where certain edges can only be traversed in one direction or have different costs depending on the traversing direction):",
        "p-4": "If a connection between a pair of cities doesn't exists (for example because of a road network layout), the quantum annealer has to be discouraged at all costs from incorporating it in the solution. To represent a non-existent edge, you therefore could assign a massive punishment to it so that the lowest cost is never reached if it's part of the tour. In mathematical literature, this is commonly expressed with an \"&#8734;\" (infinity) symbol, but in our case, a high integer number is more applicable.",
        "p-5": "To represent different costs at different traversing directions in a directed graph, you only have to differentiate between the order the nodes can be visited when formulating the QUBO equation. In the example below, the cost function has different values depending on whether the path leads from A to C or from C to A:",
        "p-6": "The previous method can be applied to the case when a connection exists only in one direction: The other direction is assigned a high cost. It should be noted, however, that in the case of incomplete and directed graphs, the quantum annealer can only output a valid solution if a Hamiltonian cycle actually exists.",
        "i-0": "Examples of an incomplete graph (left) and a directed graph (right)"
    },
    "lesson-U7uiF": {
        "h2-0": "Closing thoughts",
        "p-0": "With new milestones being achieved every year, quantum computing is a rapidly evolving technology that will have a major impact on our lives. It is currently one of our most promising solutions to the problem of optimization as a whole, which is why further research on quantum algorithms for the Traveling Salesman Problem and other tasks is definitely worthwhile.",
        "p-1": "Nevertheless, it is important to recognize the limitations as well. Until this method can be applied to problems relevant to everyday life and business (&#8764;50-100 cities), much progress needs to be made. However, contrary to its (yet) limited capacity and its error rate, the quantum approach has a major potential to be used in real life, since in industry, in most cases, not necessarily the best but a good solution is needed and the speed with which it is found is much more important than its accuracy. Solving the TSP with quantum annealers therefore represents a great opportunity that can significantly accelerate manufacturing, logistics and research processes in the future.",
        "p-2-0": "I would like to sincerely thank everyone who supported me in this research, especially",
        "p-2-1": "and the",
        "p-3": "Special thanks go to <strong>Dennis Willsch</strong> and <strong>Kristen Michielsen</strong> at the JSC for their generous support, guidance and coordination.",
        "p-4": "Thanks also to <strong>René Grünbauer</strong> from Gymnasium der Regensburger Domspatzen, who made the project possible through his excellent ideas.",
        "h3-0": "Thank you notes"
    },
    "lesson-store": {
        "title": {
            "BxESn": "An introduction to the Traveling Salesman Problem",
            "m2MJl": "QUBO problems",
            "xR66u": "How do quantum annealers work?",
            "yV8O6": "Transforming the Traveling Salesman Problem for quantum annealers",
            "0nRrT": "Formulating the QUBO equation",
            "EFTOp": "From coefficients to the Hamiltonian",
            "m9UPL": "How to design your own graphs",
            "okhMZ": "Experimental results",
            "_Z9Gv": "Where are the constraints?",
            "ufr4r": "Possible improvements and optimizations",
            "U7uiF": "Closing thoughts",
            "Z30Ce": "Graph theory"
        },
        "desc": {
            "BxESn": "You are the representative of a big company that sends you on a business trip through its main sites. Coincidentally, they are located in the ...",
            "m2MJl": "Before we can explore how quantum annealers work, there is an essential basic to be covered. For a quantum annealer to solve a task, it must be defined as ...",
            "xR66u": "Equipped with the basic mathematics, we can now face the question: How do we get from an input to a result? The process of programming a quantum annealer ...",
            "yV8O6": "Creating a quantum solution for the TSP is an exciting example of the versatility of quantum computing as well as a demonstration of ...",
            "0nRrT": "From the example tour matrix in the previous lesson, the following rules for occupancy can be derived: 1. Exactly one occupation per row is allowed (since ...",
            "EFTOp": "The coefficients from the QUBO equation need to be transferred to the Hamiltonian in order to be a valid input for the quantum annealer. The result of ...",
            "m9UPL": "If you want to submit your own networks to the quantum annealer, you need to convert them to the Hamiltonian first. The tool Graph to Matrix, which can be ...",
            "okhMZ": "When it comes to evaluating the performance of quantum algorithms, this often poses a problem because of the inherent non-deterministic nature of this method ...",
            "_Z9Gv": "This task however requires not only a large amount of further mathematical calculations, but also an intricate and founded knowledge of the QPU ...",
            "ufr4r": "Since TSP solutions are closed loops that visit every city, the starting point can be set arbitrarily. So in theory, if we take this decision away from ...",
            "U7uiF": "With new milestones being achieved every year, quantum computing is a rapidly evolving technology that will have a major impact on our lives. It is currently ...",
            "Z30Ce": "Computers only take numbers, so we need to use them as well. We already subconsciously drew a key concept of the solving method with the cities interconnected with ..."
        }
    },
    "download-store": {
        "title": {
            "WQnhY": "Graph To Matrix - TSPQ",
            "2Jmfy": "Path Visualizer - TSPQ",
            "APf1g": "Tutorial notebook",
            "HQerk": "Experimental results database",
            "Pv9Rq": "Resultsbook"
        },
        "desc": {
            "WQnhY": "A helper program to visually design graphs on a canvas and export their Hamiltonian with one click as an input for the quantum annealers",
            "2Jmfy": "A helper program to read and visualize the solutions of quantum annealers to Traveling Salesman Problems on a canvas",
            "APf1g": "An interactive Python notebook for those who are interested in the code for this course, including tutorials on how to interact with the D-Wave quantum annealers",
            "HQerk": "This file contains the raw data of the measurements made to evaluate the performance of the TSP quantum algorithm; useful for plotting your own graphs, can be read by various JSON libraries",
            "Pv9Rq": "All relevant experimental and benchmarking data, concatenated into a single document; contains the Hamiltonians and data plots for graphs of all solvable sizes, free for print production"
        }
    },
    "references": "References",
    "ref_access": "accessed",
    "button-0": "Start",
    "button-1": "Download",
    "footer": "Created with"
}